# -*- coding: utf-8 -*-

"""
Parse `plist` file generated by TexturePacker,
only support `png` texture.
"""

from PIL import Image
import re
import plistlib
import os
import sys

regSeg = "\s*(\-?\d+)\s*"


def VecFromString(string):
    """ Convert string like `{123,123}` to tuple `(123, 123)`."""
    pattern = "\s*\{" + regSeg + "," + regSeg + "\}\s*"
    result = re.match(pattern, string)
    if result is not None:
        return tuple(map(int, result.groups()))
    return


def RectFromString(string):
    """ Convert string like `{{123,123},{123,123}}` to tuple
    `(123, 123, 123, 123)`."""
    pattern = "\s*\{" + regSeg + "," + regSeg + "\}\s*"
    pattern = "\s*\{" + pattern + "," + pattern + "\}\s*"
    result = re.match(pattern, string)
    if result is not None:
        return tuple(map(int, result.groups()))
    return


def parseFrame(frameName, frameDict, textureImage, inDir):
    frame = RectFromString(frameDict.frame)
    rotated = frameDict.rotated
    offset = VecFromString(frameDict.offset)
    originalSize = VecFromString(frameDict.sourceSize)
    # print frameName, frame, rotated, offset, originalSize

    frameDir, frameBaseName = os.path.split(frameName)
    frameDir = os.path.join(inDir, frameDir)
    if len(frameDir) > 0:
        frameDir = frameDir + os.sep
        if not os.path.exists(frameDir):
            os.makedirs(frameDir)
    _, ext = os.path.splitext(frameBaseName)
    ext = ext[1:]

    x1, y1, w, h = frame
    if rotated:
        # w, h in frame is rotated
        w, h = h, w
    x2, y2 = x1 + int(w), y1 + int(h)
    subIm = textureImage.crop((x1, y1, x2, y2))
    if rotated:
        subIm = subIm.rotate(90, expand=1)

    mode, color = "RGBA", (0, 0, 0, 0)
    if ext == "jpg" or ext == "jpeg":
        ext = "jpeg"
        mode = "RGB"
    newIm = Image.new(mode, originalSize, color)

    offx = (originalSize[0] - frame[2]) / 2 + offset[0]
    offy = (originalSize[1] - frame[3]) / 2 - offset[1]
    newIm.paste(subIm, (offx, offy))

    frameFullPath = os.path.join(frameDir, frameBaseName)
    newIm.save(frameFullPath, ext)


def parsePlist(plistFile, desPath=None):
    print "parse plist file " + plistFile
    pl = plistlib.readPlist(plistFile)
    if pl is None:
        return

    frames, textureFileName = None, None
    try:
        frames = pl["frames"]
    except Exception, e:
        pass

    try:
        textureFileName = pl["metadata"]["realTextureFileName"]
    except Exception, e:
        pass
    if textureFileName is None:
        try:
            textureFileName = pl["metadata"]["textureFileName"]
        except Exception, e:
            pass

    if frames is None or textureFileName is None:
        print "[ERROR] cannot find frames or textureFileName" + plistFile
        return

    print "---------- [START] ----------"

    fdir, fbasename = os.path.split(plistFile)
    fbasename, _ = os.path.splitext(fbasename)

    if desPath is not None:
        desPath = os.path.dirname(desPath)
    else:
        desPath = fdir
    frameDir = os.path.join(desPath, fbasename)
    if not os.path.exists(frameDir):
        os.makedirs(frameDir)

    try:
        texImage = Image.open(os.path.join(fdir, textureFileName))
        for frameName, frameDict in frames.iteritems():
            parseFrame(frameName, frameDict, texImage, frameDir)

        print "[DONE]" + plistFile + " > " + frameDir
    except Exception, e:
        print "[ERROR] parsing " + plistFile 
        print e
    print "---------- [END] ----------"


def walk(srcPath, desPath=None):
    if os.path.isdir(srcPath):
        if srcPath.find('.svn') != -1:
            return
        paths = os.listdir(srcPath)
        for item in paths:
            itemsrc = os.path.join(srcPath, item)
            walk(itemsrc, desPath)

    elif os.path.isfile(srcPath):
        if srcPath[-6:] == '.plist':
            parsePlist(srcPath, desPath)


def main():
    os.chdir(os.path.split(os.path.realpath(__file__))[0])
    argv = sys.argv
    if len(argv) < 1:
        return
    elif len(argv) == 2:
        srcPath = sys.argv[1]
        walk(srcPath)
    elif len(argv) == 3:
        srcPath = sys.argv[1]
        desPath = sys.argv[2]
        walk(srcPath, desPath)

if __name__ == '__main__':
    main()
